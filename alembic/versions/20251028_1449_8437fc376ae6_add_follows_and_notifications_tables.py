"""add_follows_and_notifications_tables

Revision ID: 8437fc376ae6
Revises: 0c503c0a63ca
Create Date: 2025-10-28 14:49:42.804853

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "8437fc376ae6"
down_revision: str | Sequence[str] | None = "0c503c0a63ca"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "follows",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("follower_id", sa.Uuid(), nullable=False, comment="关注者ID"),
        sa.Column("followed_id", sa.Uuid(), nullable=False, comment="被关注者ID"),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="关注时间",
        ),
        sa.ForeignKeyConstraint(["followed_id"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["follower_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("follower_id", "followed_id", name="uq_follow_unique"),
    )
    op.create_index(
        "idx_followed_created", "follows", ["followed_id", "created_at"], unique=False
    )
    op.create_index(
        "idx_follower_created", "follows", ["follower_id", "created_at"], unique=False
    )
    op.create_index(
        op.f("ix_follows_followed_id"), "follows", ["followed_id"], unique=False
    )
    op.create_index(
        op.f("ix_follows_follower_id"), "follows", ["follower_id"], unique=False
    )
    op.create_table(
        "notifications",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("recipient_id", sa.Uuid(), nullable=False, comment="通知接收人ID"),
        sa.Column("actor_id", sa.Uuid(), nullable=False, comment="操作发起人ID"),
        sa.Column(
            "notification_type",
            sa.Enum("LIKE", "COMMENT", "FOLLOW", name="notificationtype"),
            nullable=False,
            comment="通知类型：like, comment, follow",
        ),
        sa.Column(
            "post_id",
            sa.Uuid(),
            nullable=True,
            comment="关联的文章ID（点赞、评论类通知）",
        ),
        sa.Column(
            "comment_id", sa.Uuid(), nullable=True, comment="关联的评论ID（仅评论通知）"
        ),
        sa.Column(
            "aggregated_count",
            sa.Integer(),
            nullable=False,
            comment="聚合操作数（同一资源1小时内的多个操作合并为1条）",
        ),
        sa.Column("is_read", sa.Boolean(), nullable=False, comment="是否已读"),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="通知创建时间",
        ),
        sa.Column(
            "last_updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
            comment="通知最后更新时间（用于聚合判断，1小时内视为同一批操作）",
        ),
        sa.Column(
            "read_at",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="标记已读的时间",
        ),
        sa.ForeignKeyConstraint(["actor_id"], ["users.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["comment_id"], ["comments.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["post_id"], ["posts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["recipient_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "recipient_id",
            "post_id",
            "comment_id",
            "notification_type",
            name="uq_notification_unique",
        ),
    )
    op.create_index(
        "idx_recipient_created",
        "notifications",
        ["recipient_id", "created_at"],
        unique=False,
    )
    op.create_index(
        "idx_recipient_unread",
        "notifications",
        ["recipient_id", "is_read", "created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_notifications_created_at"),
        "notifications",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_notifications_is_read"), "notifications", ["is_read"], unique=False
    )
    op.create_index(
        op.f("ix_notifications_recipient_id"),
        "notifications",
        ["recipient_id"],
        unique=False,
    )
    op.drop_constraint(
        op.f("post_views_user_id_fkey"), "post_views", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "post_views", "users", ["user_id"], ["id"], ondelete="SET NULL"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("post_views_user_id_fkey"), table_name="post_views", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("post_views_user_id_fkey"),
        "post_views",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_notifications_recipient_id"), table_name="notifications")
    op.drop_index(op.f("ix_notifications_is_read"), table_name="notifications")
    op.drop_index(op.f("ix_notifications_created_at"), table_name="notifications")
    op.drop_index("idx_recipient_unread", table_name="notifications")
    op.drop_index("idx_recipient_created", table_name="notifications")
    op.drop_table("notifications")
    op.drop_index(op.f("ix_follows_follower_id"), table_name="follows")
    op.drop_index(op.f("ix_follows_followed_id"), table_name="follows")
    op.drop_index("idx_follower_created", table_name="follows")
    op.drop_index("idx_followed_created", table_name="follows")
    op.drop_table("follows")
    # ### end Alembic commands ###
